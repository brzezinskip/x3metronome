{"version":3,"sources":["reanimated/core.cljs"],"mappings":"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","names":["reanimated.core/now","js/Date","reanimated.core/interpolate","a","b","duration","t","var_args","G__28561","reanimated.core/pop-when","js/Error","condition","then","reanimated.core.pop_when","options","anim","reagent.core.atom","cljs.core.not_EQ_","cljs.core/deref","cljs.core/reset!","map__28562","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","easing","scale","reagent.core/next-tick","cljs.core.swap_BANG_","cljs.core/update","cljs.core/inc","reanimated.core/toggle-handler","ratom","e","cljs.core/not","reanimated.core/mouse-watcher","G__28565","reanimated.core/interpolate-if","reanimated.core.interpolate_if","map__28566","reagent.ratom/make-reaction","G__28569","reanimated.core/interpolate-to","x","reanimated.core.interpolate_to","map__28570","cljs.core/assoc","at","G__28573","reanimated.core/interpolate-arg","component","reanimated.core.interpolate_arg","map__28574","i","G__28576","G__28577","G__28578","G__28579","reanimated.core/mass","reanimated.core/stiffness","reanimated.core/damping","p__28580","map__28581","reanimated.core/evaluate","x2","dt","v","mass","stiffness","damping","f","reanimated.core/integrate-rk4","vec__28583","cljs.core.nth","vec__28586","vec__28589","vec__28592","dt2","av","aa","bv","ba","cv","ca","dv","da","dx","reanimated.core/stop?","threshold","G__28596","reanimated.core/spring","reanimated.core.spring","map__28597","from","velocity","last","cljs.core.atom","x2prev","map__28599","t2","x__4217__auto__","y__4218__auto__","js/Math.abs","vec__28601","reanimated.core/watch","r","k","cljs.core.keyword","cljs.core.gensym","reagent.core.create_class","this","cljs.core/add-watch","cljs.core/remove-watch","reanimated.core/interval","id","js/setInterval","js/clearInterval","reanimated.core/timeout","js/setTimeout","js/clearTimeout","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","reanimated.core/and-then","seq28604","G__28605","cljs.core/first","cljs.core/next","G__28606","G__28607","self__4723__auto__","element","more","cljs.core/seq","cljs.core/vector?","cljs.core/ifn?","cljs.core/coll?","cljs.core/map?","cljs.core/type","cljs.core.pr_str","reanimated.core/timeline","seq28608","G__28609","xs","reanimated.core/slow-reveal","vec__28610","head","cljs.core/split-with","cljs.core/complement","root","cljs.core/vec","cljs.core.into","cljs.core/concat","iter__4529__auto__","s__28614","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__28616","cljs.core/chunk-buffer","i__28615","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28613","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","cljs.core/conj","reanimated.core/get-scroll-y","goog.dom/getDocumentScroll","reanimated.core/get-scroll","reanimated.core/get-scroll-x","reanimated.core/scroll-y","reanimated.core/scroll","reanimated.core/scroll-x","goog.events/listen","js/window","goog.events.EventType/SCROLL","cljs.core/chunk-first"],"sourcesContent":["(ns reanimated.core\n  \"An animation library for Reagent (ClojureScript).\n  There is only one concept:\n  A reaction that moves toward some target,\n  each step triggers another update until it reaches the end state.\n  The trigger occurs by touching a local atom a zero timeout,\n  which changes the atom in the next Reagent render.\"\n  (:require-macros\n   [reagent.ratom :as ratom])\n  (:require\n   [reagent.core :as reagent]\n   [goog.events :as events]\n   [goog.events.EventType :as EventType]\n   [goog.dom :as dom]))\n\n(defn ^:private now []\n  (js/Date.))\n\n(defn ^:private interpolate\n  \"Calculates a value between a and b relative to t in duration.\"\n  [a b duration t]\n  (cond\n    (<= t 0) a\n    (>= t duration) b\n    :else (+ a (/ (* t (- b a)) duration))))\n\n(defn pop-when\n  \"Wraps a component to animate creation and destruction.\n  Takes a condition ratom and a vector or value to be rendered.\n  Options can contain duration (milliseconds)\n  and easing (a function that takes a b duration t).\"\n  ([condition then] (pop-when condition then {}))\n  ([condition then options]\n   (let [anim (reagent/atom {:from condition})]\n     (fn a-pop-when [condition then options]\n       (when (not= condition (:from @anim))\n         (reset! anim {:start (now)\n                       :from condition\n                       :frame 0}))\n       (let [{:keys [duration easing]\n              :or {duration 200\n                   easing interpolate}} options\n             t (->> @anim :start (- (now)))\n             scale (easing 0 1 duration t)\n             scale (if condition scale (- 1 scale))]\n         (if (< t duration)\n           (do\n             (reagent/next-tick #(swap! anim update :frame inc))\n             [:div\n              {:style {:transform (str \"scale(\" scale \")\")\n                       :opacity scale}}\n              then])\n           (when condition then)))))))\n\n(defn toggle-handler\n  \"Creates an event handler that will toggle a given ratom.\"\n  [ratom]\n  (fn a-toggle-handler [e]\n    (swap! ratom not)\n    e))\n\n(defn mouse-watcher\n  \"Returns a map suitable for merging with component properties,\n  that will keep a given ratom updated with the mouseover status.\"\n  [ratom]\n  {:on-mouse-over (fn timeline-mouse-over [e]\n                    (reset! ratom true)\n                    e)\n   :on-mouse-out (fn timeline-mouse-out [e]\n                   (reset! ratom false)\n                   e)})\n\n;; TODO: pop-cond, animate between many elements. pop-case pop-if\n;; TODO: can pop-when be written in terms of interpolate-if\n\n(defn interpolate-if\n  \"Interpolates between two values when the conditon changes.\n  Takes a condition ratom to watch, and 2 vectors or values to render.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t).\"\n  ([condition a b] (interpolate-if condition a b {}))\n  ([condition a b options]\n   (let [anim (reagent/atom {:from a})\n         {:keys [duration easing]\n          :or {duration 200\n               easing interpolate}} options]\n     (ratom/reaction\n      (when (not= @condition (:condition @anim))\n        (reset! anim {:start (now)\n                      :condition @condition\n                      :from a\n                      :frame 0}))\n      (let [t (->> @anim :start (- (now)))\n            scale (easing 0 1 duration t)\n            scale (if @condition scale (- 1 scale))]\n        (if (< t duration)\n          (do\n            (reagent/next-tick #(swap! anim update :frame inc))\n            (+ (* a (- 1 scale)) (* b scale)))\n          (if @condition b a)))))))\n\n(defn interpolate-to\n  \"Interpolates toward new values.\n  Takes a ratom which stores a numeric value.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t).\"\n  ([x] (interpolate-to x {}))\n  ([x options]\n   (let [anim (reagent/atom {:from @x\n                             :at @x\n                             :to @x\n                             :start (now)})\n         {:keys [duration easing]\n          :or {duration 200\n               easing interpolate}} options]\n     (ratom/reaction\n      (when (not= (:to @anim) @x)\n        (swap! anim assoc\n               :start (now)\n               :to @x\n               :from (:at @anim)\n               :frame 0))\n      (let [t (->> @anim :start (- (now)))\n            scale (easing 0 1 duration t)\n            a (:from @anim)\n            b @x]\n        (if (< t duration)\n          (let [at (+ (* a (- 1 scale)) (* b scale))]\n            (reagent/next-tick #(swap! anim assoc\n                                           :at at\n                                           :frame (inc (:frame @anim))))\n            at)\n          b))))))\n\n(defn interpolate-arg\n  \"Interpolates the argument of a component to x.\n  Will call the given component with values approaching x.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t).\"\n  ([component x] (interpolate-arg component x {}))\n  ([component x options]\n   (let [anim (reagent/atom {:start 0 :to x :frame 0 :current x})]\n     (fn an-interpolate-arg [component x options]\n       (when (not= x (:to @anim))\n         (swap! anim assoc :start (now) :from (:current @anim) :to x :frame 0))\n       (let [{:keys [easing duration]\n              :or {duration 200\n                   easing interpolate}} options\n             t (->> @anim :start (- (now)))]\n         (if (< t duration)\n           (do\n             (reagent/next-tick #(swap! anim update :frame inc))\n             (let [i (easing (:from @anim) x duration t)]\n               (swap! anim assoc :current i)\n               [component i]))\n           [component x]))))))\n\n;; TODO: why does passing options as second argument not work?\n;; it would look more reagenty [pop-when {:duration 1000} condition then]\n\n(def ^:private mass 10)\n(def ^:private stiffness 1)\n(def ^:private damping 1)\n\n(defn ^:private evaluate\n  \"This is where the spring physics formula is applied.\"\n  [x2 dt x v a {:keys [mass stiffness damping]}]\n  (let [x (+ x (* v dt))\n        v (+ v (* a dt))\n        f (- (* stiffness (- x2 x)) (* damping v))\n        a (/ f mass)]\n    [v a]))\n\n(defn ^:private integrate-rk4\n  \"Takes an itegration step from numbers x to x2 over time dt,\n  with a present velocity v.\"\n  [x2 dt x v options]\n  (let [dt2 (* dt 0.5)\n        [av aa] (evaluate x2 0.0 x v 0.0 options)\n        [bv ba] (evaluate x2 dt2 x av aa options)\n        [cv ca] (evaluate x2 dt2 x bv ba options)\n        [dv da] (evaluate x2 dt x cv ca options)\n        dx (/ (+ av (* 2.0 (+ bv cv)) dv) 6.0)\n        dv (/ (+ aa (* 2.0 (+ ba ca)) da) 6.0)]\n    [(+ x (* dx dt)) (+ v (* dv dt))]))\n\n(defn ^:private stop? [x threshold]\n  (<= (- threshold) x threshold))\n\n(defn spring\n  \"Useful for wrapping a value in your component to make it springy.\n  Returns a reaction that will take values approaching x2,\n  updating every time Reagent calls requestAnimationFrame.\n  Integrates a physical spring simulation for each step.\n  Options can contain:\n  from - a value to start from (initial value is used if absent).\n  velocity of the mass on the spring (initially 0 if absent).\n  mass, stiffness, damping of the spring.\"\n  ([x2] (spring x2 {}))\n  ([x2 options]\n   (let [{:keys [from velocity mass stiffness damping]\n          :or {from @x2\n               velocity 0.0\n               mass 10.0\n               stiffness 1.0\n               damping 1.0}} options\n         last (atom from)\n         x2prev (atom @x2)\n         anim (reagent/atom {:t (now)\n                             :x from\n                             :v velocity})]\n     (ratom/reaction\n       (when (not= @x2 @x2prev)\n         (reset! last @x2prev)\n         (reset! x2prev @x2))\n      (let [{:keys [x v t]} @anim\n            t2 (now)\n            dt (min 1 (/ (- t2 t) 10.0))\n            threshold (/ (js/Math.abs (- @last @x2)) 100.0)]\n        (if (and (stop? (- x @x2) threshold)\n                 (stop? v threshold))\n          @x2\n          (let [[x v] (integrate-rk4 @x2 dt x v {:mass mass\n                                                 :stiffness stiffness\n                                                 :damping damping})]\n            (reagent/next-tick #(reset! anim {:t t2\n                                              :x x\n                                              :v v}))\n            x)))))))\n\n(defn watch\n  \"Watch a ref only while mounted in the DOM.\"\n  [r f]\n  (let [k (keyword (gensym \"watch\"))]\n    (reagent/create-class\n     {:display-name \"watch\"\n      :component-did-mount\n      (fn watch-did-mount [this]\n        (add-watch r k f))\n      :component-will-unmount\n      (fn watch-will-unmount [this]\n        (remove-watch r k))\n      :reagent-render\n      (fn watch-render [r f])})))\n\n(defn interval\n  \"Call function f every period t while mounted in the DOM.\"\n  [f t]\n  (let [id (atom nil)]\n    (reagent/create-class\n     {:display-name \"interval\"\n      :component-did-mount\n      (fn interval-did-mount [this]\n        (reset! id (js/setInterval f t)))\n      :component-will-unmount\n      (fn interval-will-unmount [this]\n        (js/clearInterval @id))\n      :reagent-render\n      (fn interval-render [])})))\n\n(defn timeout\n  \"Call function f period t in milliseconds after being mounted in the DOM,\n  only if still mounted.\"\n  [f t]\n  (let [id (atom nil)]\n    (reagent/create-class\n     {:display-name \"timeout\"\n      :component-did-mount\n      (fn timeout-did-mount [this]\n        (reset! id (js/setTimeout f t)))\n      :component-will-unmount\n      (fn timeout-will-unmount [this]\n        (js/clearTimeout @id))\n      :reagent-render\n      (fn timeout-render [])})))\n\n(defn ^:private and-then\n  \"Use timeline instead of this function directly.\n  Provides a way to express a sequence of actions and pauses.\n  Takes an id atom, element ratom,\n  and a sequence of numbers and/or callback functions and/or vectors.\n  Treats numbers as a wait timeout in milliseconds,\n  calls callbacks after the elapsed time.\n  id is reset as the timeout reference for cleanup.\n  element is reset to vectors for rendering.\"\n  [id element x & more]\n  (cond\n    (number? x)\n    (when (seq more)\n      (reset! id (js/setTimeout (fn [] (apply and-then id element more)) x)))\n\n    (vector? x)\n    (do (reset! element x)\n        (when (seq more)\n          (apply and-then id element more)))\n\n    (and (ifn? x) (not (coll? x)) (not (map? x)))\n    (do (x)\n        (when (seq more)\n          (apply and-then id element more)))\n\n    :else\n    (apply and-then id element\n           [:div\n            (str \"timeline encountered unexpected type \" (type x))\n            [:p (pr-str x)]]\n           more)))\n\n(defn timeline\n  \"Given a sequence of inputs, will consume them depending on their type:\n  numbers will be a sleep in milliseconds\n  functions will be called with no arguments\n  vectors will be rendered as reagent components.\"\n  [x & xs]\n  (let [id (atom nil)\n        element (reagent/atom nil)]\n    (reagent/create-class\n     {:display-name \"interval\"\n      :component-did-mount\n      (fn timeout-did-mount [this]\n        (apply and-then id element x xs))\n      :component-will-unmount\n      (fn timeout-will-unmount [this]\n        (when @id\n          (js/clearTimeout @id)))\n      :reagent-render\n      (fn timeout-render []\n        @element)})))\n\n(defn slow-reveal [t xs]\n  \"Converts a vector into a timeline spaced by t.\n  [:div [:a] [:b]] -> [timeline [:div] t [:div [:a]] t [:div [:a] [:b]]]\"\n  (let [[head more] (split-with (complement vector?) xs)\n        root (atom (vec head))]\n    (into\n      [timeline @root]\n      (apply\n        concat\n        (for [x more]\n          [t (swap! root conj x)])))))\n\n(defn get-scroll-y\n  \"Gets the current document y scroll position.\"\n  []\n  (.-y (dom/getDocumentScroll)))\n\n(def get-scroll\n  \"Gets the current document y scroll position.\"\n  get-scroll-y)\n\n(defn get-scroll-x\n  \"Gets the current document x scroll position.\"\n  []\n  (.-x (dom/getDocumentScroll)))\n\n(def scroll-y\n  \"A ratom for watching the current document y scroll,\n  will be updated when there is a scroll event.\"\n  (reagent/atom (get-scroll-y)))\n\n(def scroll\n  \"A ratom for watching the current document y scroll,\n  will be updated when there is a scroll event.\"\n  scroll-y)\n\n(def scroll-x\n  \"A ratom for watching the current document x scroll,\n  will be updated when there is a scroll event.\"\n  (reagent/atom (get-scroll-x)))\n\n(events/listen\n js/window EventType/SCROLL\n (fn a-scroll [e]\n   (reset! scroll-y (get-scroll-y))\n   (reset! scroll-x (get-scroll-x))))\n\n;; TODO: still thinking about this\n#_(defn scroll\n   []\n   {:display-name \"scroll\"\n    :component-did-mount\n    (fn scroll-did-mount [this]\n      (.getDomNode this))})\n"]}