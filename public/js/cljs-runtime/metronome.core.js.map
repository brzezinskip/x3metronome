{"version":3,"sources":["metronome/core.cljs"],"mappings":"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","names":["metronome.core/clear-interval","timer-fn","seconds","reps","countdown?","countdown-value","cljs.core/deref","js/clearInterval","cljs.core/reset!","metronome.core/start-counting","cadence","speak","js/setInterval","and__4115__auto__","G__35555","cljs.core.swap_BANG_","cljs.core/dec","cljs.core._EQ_","cljs.core/inc","G__35556","p__35557","map__35558","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","metronome.core/on-row-click","running","phrase","js/window.speechSynthesis.speak","js/SpeechSynthesisUtterance","cljs.core/not","metronome.core/get-bg-opacity","metronome.core/text-classes","metronome.core/text","value","p1__35560#","metronome.core/checkbox","label","checked?","on-change","p__35562","map__35563","metronome.core/counter-row","desc","bg-color","with-let35565","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__28532__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init35566","res__28533__auto__","destroy__28531__auto__","reagent.ratom/reactive?","seconds-elapsed","reagent.core.atom","cljs.core.atom","p1__35561#","metronome.core/home-page","metronome.core/mount-root","reagent.dom.render","js/document","metronome.core/init!"],"sourcesContent":["(ns metronome.core\n  (:require\n   [reagent.core :as r]\n   [reagent.dom :as d]))\n\n(defn clear-interval [timer-fn seconds reps countdown? countdown-value]\n  (do (js/clearInterval @timer-fn)\n      (reset! seconds 0)\n      (reset! reps 0)\n      (reset! countdown? false)\n      (reset! countdown-value 3)))\n\n(defn start-counting [timer-fn countdown? countdown-value seconds cadence reps speak]\n  (reset! timer-fn\n          (js/setInterval\n           #(do\n              (if (and @countdown? (not (zero? (inc @countdown-value))))\n                (do\n                  (speak @countdown-value)\n                  (swap! countdown-value dec)\n                  (if (zero? @countdown-value)\n                    (reset! seconds 0)))\n                (if (= @seconds cadence)\n                  (do\n                    (speak 1)\n                    (reset! seconds 1)\n                    (swap! reps inc))\n                  (do\n                    (swap! seconds inc)\n                    (speak @seconds))))) 1000)))\n\n(defn on-row-click [{seconds         :seconds\n                     timer-fn        :timer-fn\n                     running         :running\n                     cadence         :cadence\n                     reps            :reps\n                     countdown?      :countdown?\n                     countdown-value :countdown-value}]\n  (fn []\n    (let [speak (fn [phrase] (js/window.speechSynthesis.speak (js/SpeechSynthesisUtterance. phrase)))]\n      (speak \"\")\n      (if @running (clear-interval timer-fn seconds reps countdown? countdown-value)\n          (start-counting timer-fn countdown? countdown-value seconds cadence reps speak))\n      (reset! running (not @running)))))\n\n(defn get-bg-opacity [seconds cadence]\n  (if (= @seconds cadence)\n    \"bg-opacity-50\"\n    \"bg-opacity-75\"))\n\n(def text-classes\n  \"text-4xl sm:text-4xl md:text-8xl lg:text-8xl text-center text-gray-50 font-mono font-bold\")\n\n(defn text [value]\n  [:span {:class text-classes} value])\n\n(defn checkbox [label checked? on-change]\n  [:div {:class \"flex flex-row self-center\"}\n   [:input {:class     \"self-center justify-self-end mr-2 w-5 h-5\"\n            :type      \"checkbox\"\n            :name      \"Countdown?\"\n            :checked   checked?\n            :on-change on-change\n            :on-click #(.stopPropagation %)}]\n   [:span {:class \"text-gray-50 font-mono font-bold pt-1\"} label]])\n\n(defn counter-row [{desc :desc bg-color :bg-color cadence :cadence}]\n  (r/with-let [seconds-elapsed (r/atom 0)\n               running (r/atom false)\n               timer-fn (atom nil)\n               reps (r/atom 0)\n               countdown? (r/atom false)\n               countdown-value (r/atom 3)]\n    (fn []\n      [:div {:class    (str \"h-full flex flex-col flex-1 \"\n                            bg-color\n                            \" \"\n                            (get-bg-opacity seconds-elapsed cadence)\n                            \" justify-evenly\")\n             :on-click (on-row-click {:seconds         seconds-elapsed\n                                      :timer-fn        timer-fn\n                                      :running         running\n                                      :cadence         cadence\n                                      :reps            reps\n                                      :countdown?      countdown?\n                                      :countdown-value countdown-value})}\n       (text desc)\n       (text (str \"Reps:\" @reps))\n       (text @seconds-elapsed)\n       (checkbox \"Countdown?\"\n                 @countdown?\n                 #(.stopPropagation % (reset! countdown? (not @countdown?))))])\n    (finally (js/clearInterval timer-fn))))\n\n(defn home-page []\n  [:div {:class \"w-screen h-screen flex flex-col\"}\n   [:header {:class \"h-20 bg-gray-800 flex flex-row w-fill px-10\"}\n    [:span {:class \"self-center items-center justify-self-center text-gray-300 flex flex-row flex-1 font-medium text-center\"}\n     [:img {:src \"images/stopwatch-solid.svg\" :width 40 :height 40 :class \"mr-5\"}]\n     [:span {:class \"invisible sm:visible md:visible lg:visible text-gray-300 text-center\"} \"X3 METRONOME\"]]\n    [:span {:class \"self-center text-left md:text-center text-gray-300 flex-1 font-medium\"} \"TAP TO START\"]\n    [:div {:class \"self-center justify-self-end flex-1 text-right\"} \"\"]]\n   [counter-row {:desc \"2U2D\" :bg-color \"bg-purple-600\" :cadence 4}]\n   [counter-row {:desc \"3U3D\" :bg-color \"bg-red-600\" :cadence 6}]])\n\n(defn mount-root []\n  (d/render [home-page] (.getElementById js/document \"app\")))\n\n(defn ^:export init! []\n  (mount-root))\n"]}