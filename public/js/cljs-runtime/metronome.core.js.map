{"version":3,"sources":["metronome/core.cljs"],"mappings":"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","names":["p__33264","map__33265","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","metronome.core/on-row-click","seconds","timer-fn","running","cadence","reps","countdown?","countdown-value","speak","phrase","js/window.speechSynthesis.speak","js/SpeechSynthesisUtterance","cljs.core/deref","js/clearInterval","cljs.core/reset!","js/setInterval","and__4115__auto__","cljs.core.swap_BANG_","cljs.core/dec","cljs.core._EQ_","cljs.core/inc","cljs.core/not","metronome.core/get-bg-opacity","metronome.core/text-classes","metronome.core/text","value","p1__33267#","metronome.core/checkbox","label","checked?","on-change","p__33269","map__33270","metronome.core/counter-row","desc","bg-color","with-let33272","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__28532__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init33273","res__28533__auto__","destroy__28531__auto__","reagent.ratom/reactive?","seconds-elapsed","reagent.core.atom","cljs.core.atom","p1__33268#","metronome.core/home-page","metronome.core/mount-root","reagent.dom.render","js/document","metronome.core/init!"],"sourcesContent":["(ns metronome.core\n  (:require\n    [reagent.core :as r]\n    [reagent.dom :as d]\n    ))\n\n\n\n(defn on-row-click [{seconds         :seconds\n                     timer-fn        :timer-fn\n                     running         :running\n                     cadence         :cadence\n                     reps            :reps\n                     countdown?      :countdown?\n                     countdown-value :countdown-value}]\n      (fn []\n          (let [speak (fn [phrase] (js/window.speechSynthesis.speak (js/SpeechSynthesisUtterance. phrase)))]\n               (speak \"\")\n               (if @running (do (js/clearInterval @timer-fn) (reset! seconds 0) (reset! reps 0) (reset! countdown? false) (reset! countdown-value 3))\n                            (reset! timer-fn\n                                    (js/setInterval\n                                      #(do\n                                         (if (and @countdown? (not (zero? (inc @countdown-value))))\n                                           (do\n                                             (speak @countdown-value)\n                                             (swap! countdown-value dec)\n                                             (if (zero? @countdown-value)\n                                                (reset! seconds 0))\n                                             )\n                                           (if (= @seconds cadence)\n                                             (do\n                                               (speak 1)\n                                               (reset! seconds 1)\n                                               (swap! reps inc))\n                                             (do\n                                               (swap! seconds inc)\n                                               (speak @seconds)\n                                               )))) 1000)))\n               (reset! running (not @running))\n               )))\n\n(defn get-bg-opacity [seconds cadence]\n      (if (= @seconds cadence)\n        \"bg-opacity-50\"\n        \"bg-opacity-75\"))\n\n(def text-classes\n  \"text-4xl sm:text-4xl md:text-8xl lg:text-9xl text-center text-gray-50 font-mono font-bold\")\n\n(defn text [value]\n      [:span {:class text-classes} value])\n\n(defn checkbox [label checked? on-change]\n      [:div {:class \"flex flex-row self-center\"}\n       [:input {:class     \"self-center justify-self-end mr-2 w-5 h-5\"\n                :type      \"checkbox\"\n                :name      \"Countdown?\"\n                :checked   checked?\n                :on-change on-change\n                :on-click #(.stopPropagation %)}\n                ]\n       [:span {:class \"text-gray-50 font-mono font-bold pt-1\"} label]])\n\n(defn counter-row [{desc :desc bg-color :bg-color cadence :cadence}]\n      (r/with-let [seconds-elapsed (r/atom 0)\n                   running (r/atom false)\n                   timer-fn (atom nil)\n                   reps (r/atom 0)\n                   countdown? (r/atom false)\n                   countdown-value (r/atom 3)]\n                  (fn []\n                      [:div {:class    (str \"h-full flex flex-col flex-1 \"\n                                            bg-color\n                                            \" \"\n                                            (get-bg-opacity seconds-elapsed cadence)\n                                            \" justify-evenly\")\n                             :on-click (on-row-click {:seconds         seconds-elapsed\n                                                      :timer-fn        timer-fn\n                                                      :running         running\n                                                      :cadence         cadence\n                                                      :reps            reps\n                                                      :countdown?      countdown?\n                                                      :countdown-value countdown-value})}\n                       (text desc)\n                       (text (str \"Reps:\" @reps))\n                       (text @seconds-elapsed)\n                       (checkbox \"Countdown?\"\n                                 @countdown?\n                                 #(.stopPropagation % (reset! countdown? (not @countdown?))))])\n                  (finally (js/clearInterval timer-fn))))\n\n(defn home-page []\n      [:div {:class \"w-screen h-screen flex flex-col\"}\n       [counter-row {:desc \"2U2D\" :bg-color \"bg-purple-600\" :cadence 4}]\n       [counter-row {:desc \"3U3D\" :bg-color \"bg-red-600\" :cadence 6}]])\n\n\n\n(defn mount-root []\n      (d/render [home-page] (.getElementById js/document \"app\")))\n\n(defn ^:export init! []\n      (mount-root))\n"]}