{"version":3,"sources":["metronome/core.cljs"],"mappings":"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","names":["p__28814","map__28815","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","metronome.core/on-row-click","seconds","timer-fn","running","cadence","reps","cljs.core/deref","js/clearInterval","cljs.core/reset!","js/setInterval","cljs.core._EQ_","cljs.core.swap_BANG_","cljs.core/inc","js/window.speechSynthesis.speak","js/SpeechSynthesisUtterance","cljs.core/not","metronome.core/get-bg-opacity","p__28817","map__28818","metronome.core/counter-row","desc","bg-color","with-let28820","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__28532__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init28821","res__28533__auto__","destroy__28531__auto__","reagent.ratom/reactive?","seconds-elapsed","reagent.core.atom","cljs.core.atom","metronome.core/home-page","metronome.core/mount-root","reagent.dom.render","js/document","metronome.core/init!"],"sourcesContent":["(ns metronome.core\n  (:require\n    [reagent.core :as r]\n    [reagent.dom :as d]\n    ))\n\n\n\n(defn on-row-click [{seconds  :seconds\n                     timer-fn :timer-fn\n                     running :running\n                     cadence :cadence\n                     reps :reps}]\n      (fn []\n          (if @running (do (js/clearInterval @timer-fn) (reset! seconds 0) (reset! reps 0))\n                       (reset! timer-fn (js/setInterval\n                                          #(do\n                                             (if (= @seconds cadence)\n                                               (do (reset! seconds 1)\n                                                   (swap! reps inc))\n                                               (swap! seconds inc))\n                                             (js/window.speechSynthesis.speak (js/SpeechSynthesisUtterance. @seconds))) 1000)))\n          (reset! running (not @running))\n          ))\n\n(defn get-bg-opacity [seconds cadence]\n      (if (= @seconds cadence)\n        \"bg-opacity-50\"\n        \"bg-opacity-75\"))\n\n(defn counter-row [{desc :desc bg-color :bg-color cadence :cadence}]\n      (r/with-let [seconds-elapsed (r/atom 0)\n                   running (r/atom false)\n                   timer-fn (atom nil)\n                   reps (r/atom 0)]\n                  (fn []\n                      [:div {:class    (str \"h-full flex flex-col flex-1 \"\n                                            bg-color\n                                            \" \"\n                                            (get-bg-opacity seconds-elapsed cadence)\n                                            \" items-center justify-evenly\")\n                             :on-click (on-row-click {:seconds  seconds-elapsed\n                                                      :timer-fn timer-fn\n                                                      :running  running\n                                                      :cadence  cadence\n                                                      :reps     reps})}\n                       [:p {:class \"w-full text-9xl text-center text-gray-50 font-mono font-bold\"} desc]\n                       [:p {:class \"w-full text-9xl text-center text-gray-50 font-mono font-bold\"} (str \"Reps:\" @reps)]\n                       [:p {:class \"w-full text-9xl text-center text-gray-50 font-mono font-bold\"} @seconds-elapsed]])\n                  (finally (js/clearInterval timer-fn))))\n\n(defn home-page []\n      [:div {:class \"w-screen h-screen flex flex-col\"}\n       [counter-row {:desc \"2U2D\" :bg-color \"bg-purple-600\" :cadence 4}]\n       [counter-row {:desc \"3U3D\" :bg-color \"bg-red-600\" :cadence 6}]])\n\n\n\n;(defn home-page []\n;      [:div\n;       [{:class \"h-full\"}]\n;       [{:class \"h-full\"}]\n;       [{:class \"h-full\"}]])\n;; -------------------------\n;; Initialize app\n\n(defn mount-root []\n      (d/render [home-page] (.getElementById js/document \"app\")))\n\n(defn ^:export init! []\n      (mount-root))\n"]}